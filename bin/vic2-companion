#!/usr/bin/env perl6

use lib 'lib';
use PDS;
use PDS::Overlay;
use PDS::Styles;
use PDS::Victoria2;

# MAIN parameter constraints

subset Path             of Str;
subset Positive         of Int where 0 < *;
subset OptionalPositive of Int where Any:U|Positive|Bool;
subset OptionalPath     of Any where Any:U|Str|Bool;
# ??? Dear Raku, why can’t my MAIN understand a cross-module enum.
enum   When              « never always auto »;

sub when-to-when(When:D $_ --> Styles::When:D) {
    when never  { Styles::never }
    when always { Styles::always }
    when auto   { Styles::auto }
}

#| Perform static analysis of Victoria 2 game or mod files.
unit sub MAIN(
    #| one or more game or mod paths to analyse recursively (they should all be <base> subpaths
    #| [NYI])
    **@paths [$, **@],

    #| number of parallel jobs (default: 1.25 × number of cores, rounded)
    Positive :j(:$jobs) = round(1.25 * $*KERNEL.cpu-cores),

    #| when to colourise the output (default: ‘auto’), but note that colour output can only be
    #| performed if Terminal::ANSIColor is installed
    When :colour(:$color) = When::auto,

    #| periodically emit a heartbeat message, useful during long processings (interval in seconds,
    #| default if flag is set: 30s)
    OptionalPositive :$heartbeat is copy,

    #| whitelist file to read, containing one file (and not a directory) that is expected to fail
    #| per line (default if flag is set: ‘whitelist’)
    OptionalPath :$whitelist is copy,

    ##| NYI: game or mod directory basename (default: current working directory basename)
    # Str:D :$base = $*CWD.basename,

    #| comma-separated list of extensions for the files of interest (default: ‘txt’)
    Str :$exts = "txt",

    # N.b. have to hardcode Kind enumerators here
    #| comma-separated list of kinds of remarks to display (default: empty; possible kinds: ‘quirk’,
    #| ‘convention’, ‘missing-localisation’, ‘missing-info’, ‘opinion’), or special value ‘all’ by
    #| itself to display all kinds
    Str :$remarks = "",
);

# process arguments

my Styles:D $styles = Styles.new(when-to-when($color));
sub note-warning(Str:D \msg --> Bool:D) { note $styles.format-warning(msg) }

my \overlay = PDS::Overlay.new(#`(:$base, ):$styles);

$heartbeat = do given $heartbeat -> $_ --> Int {
    when * eqv True  { 30 }
    when * eqv False { Nil }
    default          { $_ andthen .Int orelse Nil }
}

$whitelist = do given $whitelist -> $_ --> Str {
    when * eqv True  { "whitelist" }
    when * eqv False { Nil }
    default          { $_ andthen .Str orelse Nil }
}
my List:D \whitelist = do with $whitelist {
    .IO.lines.grep(
        # skip the following lines...
        (
            # blank line
            '',
            # leading ‘#’ introduces a comment line
            / ^ \s* "#" /
        ).none
    ).map({ .trim.IO.cleanup })
} // ();

my \exts = $exts.split(",");

my Set:D \remarks-of-interest = do if $remarks.trim.fc eq "all".fc {
    PDS::Remark::Kind::.values.Set (-) PDS::Remark::Error
} else {
    constant Kind = PDS::Remark::Kind;
    my \kinds = Kind::.grep(*.value !eqv Kind::Error).map({ .key.fc => .value }).Map;
    my (\spec, \unrecognised) =
        (
            $remarks
            ==> split(",", :skip-empty)
            ==> map({ kinds{.trim.fc} // .Str })
            ==> classify({ $_ ~~ Kind ?? "spec" !! "unrecognised" })
        )<spec unrecognised>;

    sub prominent-usage(Str:D $_) { $styles.attention($_) }
    sub remarks-parameter()       { $styles.important("--remarks") }
    sub remarks-argument($_, Str:D :$joiner = ", ") {
        .unique.map({ my \kind = $styles.alert($_); }).join($joiner)
    }

    given spec, unrecognised {
        when :so, :so {
            note-warning(qq:to«END».chomp)
            Ignoring the following unrecognised remark kinds in &remarks-parameter(): &remarks-argument(unrecognised)
            END
        }

        when :not, :so {
            my \reason = qqw:to«END».join(" ");
            &prominent-usage("because the following remark kinds are not recognised:")
            &remarks-argument(unrecognised, joiner => prominent-usage(", "))
            END

            my \extra-explanation = do if unrecognised.any.trim.fc eq "all".fc {
                (
                    prominent-usage("(‘"),
                    $styles.important("all"),
                    prominent-usage("’ is not a valid comma-list item, it must be used by itself: "),
                    $styles.code("--remarks=all"),
                    prominent-usage(")"),
                ).join
            } else {
                Empty
            }

            my \remarks-usage = (
                (
                    remarks-parameter(),
                    prominent-usage(" argument is not understood "),
                    reason,
                ).join,
                extra-explanation,
            ).join("\n");

            note(qq:to«END».chomp);
            {remarks-usage}

            $*USAGE
            END
            exit(1)
        }
    }

    spec.Set
}

# preliminaries

sub is-whitelisted(IO:D \candidate, Positional \whitelist --> Bool:D)
{
    so whitelist.any ~~
        { PDS::Overlay::path-matches(candidate, PDS::Overlay::path-components($^whitelisted)) }
}

constant victoria2-grammars = (
    PDS::Victoria2::CasusBelli,
    PDS::Victoria2::Events,
);

package status { enum status «success expected-failure failure unexpected-success»; }

class ProcessResult {
    has $.path;
    has $.result;

    method remarks(::?CLASS:D: --> List:D) {
        $.result andthen .<REMARKS>.unique.List
    }

    method status(::?CLASS:D: --> status::status:D) {
        sub good($_ --> Bool:D) {
            ? (
                .so && do { PDS::Remark::Error !∈ .<REMARKS>.map(*.kind).Set }
            )
        }

        given is-whitelisted($.path, whitelist), $.result {
            when :not, ?*.&good { status::success }
            when :so,  !*.&good { status::expected-failure }
            when :not, !*.&good { status::failure }
            when :so,  ?*.&good { status::unexpected-success }
        }
    }

    our sub from-file((:key($file), :value($grammar)), :%universe --> ProcessResult:D)
    {
        my \parsed = PDS::parse($grammar, $file, :$styles, :%universe);

        # condense entire match to concrete result in case of success
        # this avoids carrying around file contents inside (sometimes huge) ast pieces
        my $result  = do parsed andthen .made orelse parsed;
        ProcessResult.new(path => $file, :$result)
    }
}

sub process-levels(@paths --> Map:D)
{

    my @levels = overlay.structure(@paths.map(*.IO), exts, victoria2-grammars);

    my $count = @levels.flat.elems;
    if $count == 0 {
        if @paths {
            print qq:to«END»;
            $styles.attention($*PROGRAM-NAME) found no files to process.
            END
        } else {
            print qq:to«END»;
            $styles.attention($*PROGRAM-NAME) had no files to process because no path was specified. If this was not what you intended, see usage with `$styles.attention($*PROGRAM-NAME) --help`.
            END
        }

        exit
    } else {
        say qq:to«END».chomp;
        $styles.attention($*PROGRAM-NAME) is processing $count {$count == 1 ?? "file" !! "files"}...
        END
        $*OUT.flush;
    }

    my %universe;
    my @incomplete-universe;
    my @results;

    use PDS::unsorted;

    for @levels -> @level {
        my \level = do {
            @level
            .race(degree => $jobs, :1batch)
            .map(&ProcessResult::from-file.assuming(:%universe))
            .List
        };

        %universe .= &extend-associative(
            |[[&merge-associatives]] %(), |level.map({ .result<RESULT>:v }).grep(Associative)
        );
        @incomplete-universe.append(level.map({ .result<INCOMPLETE-UNIVERSE>:v.Slip }));
        @results.append(level);
    }

    for @incomplete-universe.unique -> \universe-error {
        note-warning(universe-error)
    }

    @results.classify(*.status)
}

# do the work

my \heartbeats = do with $heartbeat {
    Supply.interval($_, $_).map({ now.DateTime.local.hh-mm-ss })
};
my \processing = start process-levels(@paths);

my \start = now;
my \results = await supply {
    with heartbeats {
        whenever heartbeats {
            say " ...processing ($_)...";
            $*OUT.flush
        }
    }

    whenever processing {
        .emit;
        done
    }
}
my \duration = (my \stop = now) - start;

# report results

my \count-width = [max] results.values.map({ .elems.chars });

my \number = {
    file     => { $_ <= 1 ?? "file "    !! "files" },
    it       => { $_ <= 1 ?? "it"       !! "they" },
    was      => { $_ <= 1 ?? "was"      !! "were" },
    contains => { $_ <= 1 ?? "contains" !! "contain" },
};

sub style-outcome(\items, &descr, \styles, Bool :$explain, Bool :$list-files)
{
    if items {
        my \count = items.elems;
        my \count-report = $styles.style(qq:to«END».chomp, styles);
        {count.fmt("%{count-width}d")} {number<file>(count)}
        END

        sub source($_) {
            $_ andthen $styles.quote-path($_) orelse $styles.important("<unspecified>")
        }

        my \file-report = do if $list-files {
            qq:to«END».chomp
            {
                items.map({
                    "{source(.path.path)}"
                }).join("\n")
            }
            END
        } else {
            Empty
        }

        my \failure-report = do if $explain
                                   && (my \failures = items.grep({
                                       .result.any ~~ Failure
                                   }).List) {
            qq:to«END».chomp
            {number<it>(count).tc} produced the following $styles.alert("failures"):
            {
                failures.map({
                    qq:to«END».chomp
                    In {source(.path.path)}:
                    {
                        given .result {
                            (.exception.message, .backtrace.nice.chomp).join("\n").indent(4)
                        }
                    }
                    END
                }).join("\n\n").indent(4)
            }
            END
        } else {
            Empty
        }

        my \error-report = do if $explain
                                 && (my \errors = items.grep({
                                     PDS::Remark::Error ∈ .remarks.map(*.kind)
                                 }).List) {
            qq:to«END».chomp
            {number<it>(count).tc} {number<contains>(count)} the following $styles.alert("errors"):
            {
                errors.map({
                    qq:to«END».chomp
                    In {source(.path.path)}:
                    {
                        .remarks
                        .grep({ .kind eqv PDS::Remark::Error })
                        .classify(*.kind)
                        .sort(*.key)
                        .map({
                            PDS::Report::format-reports(.value.sort(*.contexts.map(*.key).min))
                            .join("\n\n")
                        })
                        .join("\n\n").indent(4)
                    }
                    END
                }).join("\n\n").indent(4)
            }
            END
        } else {
            Empty
        }

        my \remark-report = do if my \remarks = items.grep({
                                .remarks.map(*.kind) ∩ remarks-of-interest
                            }).List {
            qq:to«END».chomp
            {number<it>(count).tc} {number<was>(count)} accompanied by the following remarks:
            {
                remarks.map({
                    qq:to«END».chomp
                    In {source(.path.path)}:
                    {
                        .remarks
                        .grep({ .kind ∈ remarks-of-interest })
                        .classify(*.kind)
                        .sort(*.key)
                        .map({
                            my \attrs = .key.&PDS::Remark::kind-attrs(:$styles);
                            qq:to«END».chomp
                            {attrs<descr>}:
                            {
                                PDS::Report::format-reports(.value.sort(*.contexts.map(*.key).min))
                                .join("\n\n").indent(4)
                            }
                            END
                        })
                        .join("\n\n").indent(4)
                    }
                    END
                }).join("\n\n").indent(4)
            }
            END
        } else {
            Empty
        }

        qq:to«END».chomp
         • {count-report} {descr(count)}{$list-files ?? ":\n    " !! ". "}{
            (
                file-report,
                failure-report,
                error-report,
                remark-report,
            ).join("\n\n").indent(4).trim-leading
        }
        END
    } else {
        Empty
    }
}

put qq:to«END»;
Processed all {number<file>(@paths.elems)} in {duration.fmt("%.2fs")}:
END

(
    style-outcome(
        results{status::success},
        { "{number<was>($_)} successfully accepted" },
        "green",
    ),
    style-outcome(
        results{status::expected-failure},
        { "from the whitelist {number<was>($_)} rejected as expected" },
        "green",
    ),
    style-outcome(
        results{status::failure},
        { "{number<was>($_)} unexpectedly rejected" },
        "red",
        :explain,
    ),
    style-outcome(
        results{status::unexpected-success},
        { "from the whitelist {number<was>($_)} accepted when {number<it>($_)} should have been rejected" },
        "red",
        :explain,
        :list-files,
    ),
).join("\n").put;

exit(1) if results{status::failure}.any | results{status::unexpected-success}.any
